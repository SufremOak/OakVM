/*!
 * @wasmer/sdk
 * Wasmer Javascript SDK. It allows interacting with Wasmer Packages in Node.js and the Browser.
 *
 * @version v0.9.0
 * @author Wasmer Engineering Team <engineering@wasmer.io>
 * @homepage https://github.com/wasmerio/wasmer-js
 * @repository git+https://github.com/wasmerio/wasmer-js.git
 * @license MIT
 */
import{init as e}from"./index.mjs";export{Atom,Command,DeployedApp,Directory,Instance,IntoUnderlyingByteSource,IntoUnderlyingSink,IntoUnderlyingSource,PublishPackageOutput,ReadableStreamSource,Runtime,ThreadPoolWorker,Trap,User,UserPackageDefinition,Volume,Wasmer,WasmerPackage,WritableStreamSink,initSync,initializeLogger,on_start,runWasix,setRegistry,setSDKUrl,setWorkerUrl,wat2wasm}from"./index.mjs";import r from"web-worker";import{fileURLToPath as t}from"node:url";import o from"node:fs/promises";import a from"node:path";globalThis.Worker=r;const i=async r=>{if(r||(r={}),!r.module){const e=new URL("wasmer_js_bg.wasm",import.meta.url).pathname;r.module=await o.readFile(e)}return r.workerUrl||(r.workerUrl=t(new URL("worker.mjs",import.meta.url))),r.sdkUrl||(r.sdkUrl=t(new URL("node.mjs",import.meta.url))),e(r)};async function n(e,r={}){let t=await o.readdir(e);for(let i of t){const t=a.join(e,i);let m=await o.stat(t);if(await m.isDirectory())r[i]={},await n(t,r[i]);else{r[a.basename(i)]={data:new Uint8Array(await o.readFile(t)),modified:m.mtime}}}return r}export{i as init,n as walkDir};
